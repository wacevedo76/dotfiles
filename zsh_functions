# set a countdown timer
function countdown(){
   local date1=$((`date +%s` + $1 * 60));
   while [ "$date1" -ge `date +%s` ]; do
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
   mpv --loop "$HOME/Audio/countdown_alarm.mp3"
   return 0
}

# set a stopwatch
function stopwatch(){
  local date1=`date +%s`;
   while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 0.1
   done
   return 0
}

# opens saved manpages via session files which contain folds
function vman(){
  if [[ -e ${HOME}/Documents/Manuals/${1} ]]; then
    if [[ -e ${HOME}/Documents/Manuals/${1}/${1}-session ]]; then
      vim -R -S ${HOME}/Documents/Manuals/${1}/${1}-session
      return 0
    else
      echo "File Exists, but it's vim session doesn't"
      return 1
    fi
  else
    echo "File does not exist"
    return 1
  fi
}

# removes all vim swapfiles from swap directory
function clearvimswap() {
  rm -rf /home/wacevedo/.config/nvim/swap/*
  return 0
}

# creates directory and then enters directory
function mkcd {
  command mkdir -p $1 && cd $1
  return 0
}

# Enter training subdirectory
function train() {
  if [[ -d ${HOME}code/wacevedo76/training/${1} ]]; then
    cd ${HOME}code/wacevedo76/training/${1}
  else
    echo "That directory doesn't exists."
    return 1
  fi
  return 0
}

# Open multiple Tmux sessions
function tnsd() {
  for arg
    do tmux new -s "$arg" -d
  done
}

# Create working environment for Python virtual environments
function tsn() {
  local SESSION=${1}
  local PROJECTDIR=${2}
  local FPATH=${HOME}code/wacevedo76/training/python/scrap/

  if [[ ${SESSION} = 'django' ]]; then

    if [[ -d ${FPATH}${PROJECTDIR} ]]; then
      cd ${FPATH}${PROJECTDIR}
    fi

    tmux new-session -d -s ${SESSION} -n ${SESSION}
    tmux send-keys "workon ${PROJECTDIR}" Enter
    tmux send-keys "rsrvr" Enter
    tmux new-window -t ${SESSION}:2 -n "Code"
    tmux send-keys "workon ${PROJECTDIR}" Enter
    tmux new-window -t ${SESSION}:3 -n "SHELL"
    tmux send-keys "workon ${PROJECTDIR}" Enter
    tmux send-keys "alias rft='clear; python functional_tests.py'" Enter
    tmux send-keys "alias pman='clear; python manage.py'" Enter
    tmux send-keys "alias rut='pman test'" Enter
    tmux new-window -t ${SESSION}:4 -n "Vimwiki"
    tmux select-window -t ${SESSION}:4
    tmux send-keys 'vw' Enter
    tmux select-window -t ${SESSION}:2
    tmux send-keys 'nvim' Enter
    tmux select-window -t ${SESSION}:1
    tmux attach -t ${SESSION}:2
    return 0
  elif [[ ${SESSION} = 'itbooks' ]]; then
    cd ${HOME}/Documents/Books/IT/programming/Python
    tmux new-session -d -s ${SESSION} -n ${SESSION}
    tmux send-keys "ranger" Enter
    tmux send-keys "kkkkkkkkkkkk"
    return 0
  else
    echo "No such defined argument"
    return 1
  fi
}

# Make simple playlist for mpv
function simplePlayList(){
  for file in *; do
    if [[ $file == *.mkv ]]; then
      echo "${file}" >> ./playlist;
    fi;
  done;
  return 0
}

# Simple scratchpad function
function sp() {
  local comment="$@"
  local scratch="${HOME}/Documents/scratchpad"
  if [[ ! -e $scratch ]]; then

# create scratchpad file remove execute from all user and rw from groups and others
    touch $scratch
    chmod a-x $scratch
    chmod go-rw $scratch
    echo "Created scratchpad";

    # add comment to scratchpad doc
    echo $comment >> $scratch
    echo "${comment} was added to ${scratch}."
    cat ${scratch}

  else
    # add comment to scratchpad doc
    echo $comment >> $scratch
    echo "${comment} was added to ${scratch}."
    cat ${scratch}
  fi
}

# display scratchpad
function esp() {
  vim $HOME/Documents/scratchpad
}

# diplay scratchpad in reverse
function dsp() {
 tac $HOME/Documents/scratchpad | less
}

# simple pinknoise sound generator
function pinknoise() {
  len='7:00:00'

  if [ "$1" != '' ]; then
    len=$1
  fi

  play -t sl - synth $len  pinknoise \
       band -n 1200 200 tremolo 20 .1 < /dev/zero
}

# disable touchpad on thinkpad x250 (using Synaptic driver)
function dtp() {
  device=$(xinput | grep Synaptics | rg -o "(id=[0-9]*)" | cut -d= -f2)

  xinput disable $device
}

# enable touchpad on thinkpad x250 (using Synaptic driver)
function etp() {
  device=$(xinput | grep Synaptics | rg -o "(id=[0-9]*)" | cut -d= -f2)

  xinput enable $device
}

# Simple search through history for search term
function shistory() {
  history | sort -rn | grep "$1" | less
}

# toggle touch to tap on touchpad
function ttt() {
  device=$(xinput | grep Synaptics | rg -o '(id=[0-9]*)' | cut -d= -f2)
  property=$(xinput list-props $device | grep --only-matching '.*Tapping Enabled [^Device].*' | cut -d: -f1 | sed 's:[^0-9]*::g')
  setting=$(xinput list-props $device | grep --only-matching '.*Tapping Enabled [^Device].*' | cut -d: -f2 | sed 's:[^0-9]*::g')

  if [[ $setting -eq 1 ]]; then
    xinput set-prop $device $property 0
  else;
    xinput set-prop $device $property 1
  fi;
}

function listdir() {
  for dir in *; do if [[ -d $dir ]]; then echo $dir; fi; done
}
